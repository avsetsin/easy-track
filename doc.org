# -*- mode: org; fill-column: 60; -*-
#+STARTUP: showall indent hidestars

* Intro

У нас есть 4 трека, каждый из них может одновременно вести
несколько голосований

[TODO:gmm] - Как это организовывать?

Предложение считается принятым, если до его окончания не
было получено достаточно возражений.

Tracks variants:
- validators requests
- grant distibution
- payments of rewards
- regular insurance payments

* Init

При инициализации запоминаем, кто ~owner~:

#+BEGIN_SRC vyper :noweb-ref data
  owner: public(address)
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref init
  self.owner = msg.sender
#+END_SRC

* Ownership

Мы можем проверять ~onlyOwner~:

#+NAME: only_owner
#+BEGIN_SRC vyper
  assert msg.sender = self.owner
#+END_SRC

Надо уметь менять ~owner~:

#+NAME: transfer_ownership
#+BEGIN_SRC vyper :noweb yes
  @external
  def transferOwnership(_newOwner: address):
      <<only_owner>>
      self.owner = _newOwner
#+END_SRC

* Ballot Makers and their management

Только "узкий круг ограниченных людей" может начинать
голосования. Храним их тут:

#+BEGIN_SRC vyper :noweb-ref data
  ballotMakers: public(HashMap[address, bool])
#+END_SRC

Проверка, что начинающий голосование, относится к этому
кругу людей:

#+NAME: only_ballot_maker
#+BEGIN_SRC vyper
  assert ballotMakers[msg.sender] = True
#+END_SRC

~Owner~ может добавлять и удалять ~ballot makers~:

#+NAME: add_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def addBallotMaker(_param: address):
      <<only_owner>>
      ballotMakers[_param] = True
#+END_SRC

#+NAME: del_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def delBallotMaker(_param: address):
      <<only_owner>>
      ballotMakers[_param] = False
#+END_SRC

* Ballot Time

#+BEGIN_SRC vyper :noweb-ref data
ballot_time: public(timedelta)
#+END_SRC


* Ballot stake

Когда кто-то начинает голосование, ему нужно стейкнуть
токены, чтобы нельзя было создавать слишком много
голосований. Порог ниже которого голосование не начнется:

#+BEGIN_SRC vyper :noweb-ref data
  minBallotStake: public(decimal)
#+END_SRC

Проверка, что стейка достаточно для начала голосования:

#+NAME: only_sufficient_stake
#+BEGIN_SRC vyper
  assert msg.value >= self.minBallotStake
#+END_SRC

* Ballot

Голосования лежат в мапе, где ключ - хэш голосования, а
значение - структура голосования:

#+BEGIN_SRC vyper :noweb-ref data
  ballots: public(HashMap[string[255], Ballot])
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref structs
  struct Ballot:
    name: string[255]
    active: bool
    created: uint256
    deadline: timestamp
    result: bool
    ballots: HashMap(uint256, decimal)
    enact_addr: address, # TODO
    enact_fun: address   # TODO
#+END_SRC

* Make Ballot

Функция для начала голосования, после проверок создает
новый Ballot:

[TODO:gmm] - надо проверять при создании, нет ли уже такого
голосования.

[TODO:gmm] - Минимальное время между попытками одного
пользователя создать новое голосоваине

[TODO:gmm] - Минимальный порог для начала
голосования. ERC-20 balanceOf();

[TODO:gmm] - Нужно лочить токены, чтобы одними и теми же
токенами нельзя было создавать голосования слишком
часто. Контракт может забирать токены, а потом ~разрешать
забрать~ (см. transfer() в purchase executor-e). Но это не
очень хороший дизайн. Мы не можем апгрейдить LDO-контракт,
потому что это геморой и стремно.  Но это не позволяет
одновременно возражать по нескольким голосованиям.

Возможная атака - создать много предложений, чтобы у
возражающий не хватило LDO-токенов на возражения по всем
предложениям, тогда хоть одно прокатит и можно будет вывести
деньги, а потом быстро продать LDO.

Чтобы от этого защититься, нужно при начале голосования
лочить больше LDO чем можно выиграть протащив предложение,
но курс может измениться.

Даже если гранты переводятся на мультисиг, это требует
только договоренности с владельцами мультисига, которые тоже
могут иметь заинтересованность в выводе денег.

#+NAME: make_ballot
#+BEGIN_SRC vyper :noweb yes
  @external
  def make_ballot(_name: string[255]):
      <<only_ballot_maker>>
      <<only_sufficient_stake>>
      self.ballots[_name] = Ballot({
          name = _name,
          active = True,
          created = block.timestamp,
          deadline = block.timestamp + ballot_time,
          result = True
      })
#+END_SRC

* TODO Send objection function

Существует атака, при которой возражающий может продать
проголосовавшие жетоны и сразу же купить новые, чтобы
проголосовать снова. Чтобы этого не произошло, в контракте
easy-track необходимо обратиться к менеджеру токенов, чтобы
запретить передачу этих токенов до конца голосования.

Еще более экономичный способ - использовать остатки на
момент блока, в котором началось голосование. То есть
голосовать могут только жетоны, которые не были перемещены с
момента начала голосования.

[TODO:gmm] проверка не истекло ли время
голосования. спросить у вайпера таймстемп или текущий блок,
есть в stacking reward contract - но там сложно
искать. Гуглить viper current block time

#+NAME: send_objection
#+BEGIN_SRC vyper
  # Starting vote process
  @external
  def send_objection():
      ...
#+END_SRC

* Ballot Endings

[TODO:gmm] - Надо завершать как только возражений стало
достаточно

assert block.timestamp >= self.deadline

* Other

Init нужен чтобы определить, кто может добавлять тех, кому
разрешено начинать голосование. По идее, только контракт
всеобщего голосования DAO может сделать это.

[TODO:gmm] - В ldo-purchase-executor/script/deploy.py есть
функция deploy_and_start_dao_vote надо посмотреть можно по
ней что-то понять. Там же есть про деполой контракта и как
проголосовать (отправить возражение) в dao_voting.vote что
вероятно поможет написать тесты.

[TODO:gmm] - Кроме покупки страховки команда Meter
выкатывала одно голосование за 4 разные вещи -
посмотреть. Можно оттуда скопипастить.

[TODO:gmm] - Ownable, Transfer ownership, нужен механизм,
чтобы поменять адрес такого контракта. Сначала овнер - это
тот кто деплоит, потом предусмотреть трансфер овнершип.

[TODO:gmm] - Как мне представиться контрактом голосования
DAO, чтобы протестить это? Как написать такой тест? Как-то
так?

#+BEGIN_SRC vyper
  # Lido DAO Vote contract
  interface DaoVote:
      def someFunc(_someparam: someType): payable
      ...
#+END_SRC

grant distibution - Голосование начинается, если удовлетворены требования
пороговой подписи K из N

[TODO:gmm] как написать проверку порога? Увеличиваем счетчик
и проверяем мапу ключ=>bool.

[TODO:gmm] Эти пэйменты будет вызывать арагон-агент. Как?
Мне надо достать интерфейс и посмотреть как у арагона это
сделано? Посмотреть что происходит при enacting голосования
арагона в lido DAO, код арагона на etherscan

[TODO:gmm] regular insurance payments Тут надо делать вызов
в ручную раз в полгода

[TODO:gmm] - Если голосование завершено, то здесь нужен
event

[TODO:gmm] - Как мне запустить что-то по результатам? В
новом оракуле есть кусок, который позволяет зашивать
проивольный смарт-контракт и дергать его.

Если голосование успешно завершено, надо вызвать функцию,
которая переведет деньги.

Читать как сделано в арагоне. В lido dao есть адреса
арагоновских проксиков, в арагоне написано как это работает
(etherscan) CallData определяет что именно дергать.

* Tangle

** validator's requests contract

Сделаем генерацию контракта для validator's requests

#+NAME: validators_contract
#+BEGIN_SRC vyper :noweb yes :tangle ./contracts/ValidatorsVote.vy
  # @version 0.2.8
  # @author Lido <info@lido.fi>
  # @licence MIT
  from vyper.interfaces import ERC20

  <<structs>>

  <<data>>

  @external
  def __init__():
      <<init>>

  <<transfer_ownership>>

  <<add_ballot_maker>>

  <<del_ballot_maker>>

  <<make_ballot>>
#+END_SRC

** test for validator's requests contract

Это заготовки для тестов.

Когда я делаю тест я хочу:
- развернуть изи-трек
- создать голосование
- закинуть возражение
- завершить голосование (как ускорить его?)
- посчитать результаты
- убедиться, что посчитано верно

Нужны приемочные тесты (сценарии):
- что изи-трек разворачивается
- что голосование создается
- что голосование реагирует на возражения
- что оно завершается (промотать время brownie test time
  прямо из теста)

#+BEGIN_SRC python :noweb yes :tangle ./tests/conftest.py :exports none
  import pytest
  from brownie import chain, Wei, ZERO_ADDRESS

  from scripts.deploy import deploy_and_start_dao_vote

  from utils.config import (
      ldo_token_address,
      lido_dao_acl_address,
      lido_dao_agent_address,
      lido_dao_voting_address,
      lido_dao_token_manager_address
  )


  @pytest.fixture(scope="function", autouse=True)
  def shared_setup(fn_isolation):
      pass


  @pytest.fixture(scope='module')
  def ldo_holder(accounts):
      return accounts.at('0xAD4f7415407B83a081A0Bee22D05A8FDC18B42da', force=True)


  @pytest.fixture(scope='module')
  def dao_acl(interface):
      return interface.ACL(lido_dao_acl_address)


  @pytest.fixture(scope='module')
  def dao_voting(interface):
      return interface.Voting(lido_dao_voting_address)


  @pytest.fixture(scope='module')
  def dao_token_manager(interface):
      return interface.TokenManager(lido_dao_token_manager_address)


  # Lido DAO Agent app
  @pytest.fixture(scope='module')
  def dao_agent(interface):
      return interface.Agent(lido_dao_agent_address)


  @pytest.fixture(scope='module')
  def ldo_token(interface):
      return interface.ERC20(ldo_token_address)


  class Helpers:
      eth_banker = None

      @staticmethod
      def fund_with_eth(addr, amount = '1000 ether'):
          Helpers.eth_banker.transfer(to=addr, amount=amount)

      @staticmethod
      def filter_events_from(addr, events):
        return list(filter(lambda evt: evt.address == addr, events))

      @staticmethod
      def assert_single_event_named(evt_name, tx, evt_keys_dict = None):
        receiver_events = Helpers.filter_events_from(tx.receiver, tx.events[evt_name])
        assert len(receiver_events) == 1
        if evt_keys_dict is not None:
          assert dict(receiver_events[0]) == evt_keys_dict
        return receiver_events[0]


  @pytest.fixture(scope='module')
  def helpers(accounts):
      Helpers.eth_banker = accounts.at('0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8', force=True)
      return Helpers


  @pytest.fixture(scope='module')
  def deploy_executor_and_pass_dao_vote(accounts, ldo_holder, ldo_token, dao_acl, dao_voting, dao_token_manager):
      def deploy(
          eth_to_ldo_rate,
          vesting_cliff_delay,
          vesting_end_delay,
          offer_expiration_delay,
          ldo_purchasers,
          allocations_total
      ):
          (executor, vote_id) = deploy_and_start_dao_vote(
              {'from': ldo_holder},
              eth_to_ldo_rate=eth_to_ldo_rate,
              vesting_cliff_delay=vesting_cliff_delay,
              vesting_end_delay=vesting_end_delay,
              offer_expiration_delay=offer_expiration_delay,
              ldo_purchasers=ldo_purchasers,
              allocations_total=allocations_total
          )

          print(f'vote id: {vote_id}')

          # together these accounts hold 15% of LDO total supply
          ldo_holders = [
              '0x3e40d73eb977dc6a537af587d48316fee66e9c8c',
              '0xb8d83908aab38a159f3da47a59d84db8e1838712',
              '0xa2dfc431297aee387c05beef507e5335e684fbcd'
          ]

          for holder_addr in ldo_holders:
              print('voting from acct:', holder_addr)
              accounts[0].transfer(holder_addr, '0.1 ether')
              account = accounts.at(holder_addr, force=True)
              dao_voting.vote(vote_id, True, False, {'from': account})

          # wait for the vote to end
          chain.sleep(3 * 60 * 60 * 24)
          chain.mine()

          assert dao_voting.canExecute(vote_id)
          dao_voting.executeVote(vote_id, {'from': accounts[0]})

          print(f'vote executed')

          total_ldo_assignment = sum([ p[1] for p in ldo_purchasers ])
          assert ldo_token.balanceOf(executor) == total_ldo_assignment

          ldo_assign_role = dao_token_manager.ASSIGN_ROLE()
          assert dao_acl.hasPermission(executor, dao_token_manager, ldo_assign_role)

          return executor

      return deploy
#+END_SRC

#+BEGIN_SRC python :noweb yes :tangle ./tests/test_validators_vote.py :exports none
  import pytest
  from brownie import Wei, chain, reverts
  from brownie.network.state import Chain

  from purchase_config import ETH_TO_LDO_RATE_PRECISION

  LDO_ALLOCATIONS = [
      1_000 * 10**18,
      3_000_000 * 10**18,
      20_000_000 * 10**18
  ]

  # 100 LDO in one ETH
  ETH_TO_LDO_RATE = 100 * 10**18

  VESTING_CLIFF_DELAY = 1 * 60 * 60 * 24 * 365 # one year
  VESTING_END_DELAY = 2 * 60 * 60 * 24 * 365 # two years
  OFFER_EXPIRATION_DELAY = 2629746 # one month


  @pytest.fixture(scope='function')
  def executor(accounts, deploy_executor_and_pass_dao_vote):
      return deploy_executor_and_pass_dao_vote(
          eth_to_ldo_rate=ETH_TO_LDO_RATE,
          vesting_cliff_delay=VESTING_CLIFF_DELAY,
          vesting_end_delay=VESTING_END_DELAY,
          offer_expiration_delay=OFFER_EXPIRATION_DELAY,
          ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
          allocations_total=sum(LDO_ALLOCATIONS)
      )


  def test_deploy_should_fails_on_wrong_allocations_total(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS) + 1
          )


  def test_deploy_should_fails_on_zero_rate(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=0,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_vesting_ends_before_cliff(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_CLIFF_DELAY - 1,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_zero_offer_exparation_delay(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=0,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_purchasers_duplicates(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[0], LDO_ALLOCATIONS[0]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_purchase_via_transfer(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_purchase_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_stranger_not_allowed_to_purchase_via_execute_purchase(accounts, executor, helpers):
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(stranger)
      assert allocation[0] == 0
      assert allocation[1] == 0

      helpers.fund_with_eth(stranger, eth_cost)

      with reverts("no allocation"):
          executor.execute_purchase(stranger, { 'from': stranger, 'value': eth_cost })


  def test_stranger_not_allowed_to_purchase_via_transfer(accounts, executor, helpers):
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      allocation = executor.get_allocation(stranger)
      assert allocation[0] == 0
      assert allocation[1] == 0

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      helpers.fund_with_eth(stranger, eth_cost)

      with reverts("no allocation"):
          executor.execute_purchase(stranger, { 'from': stranger, 'value': eth_cost })


  def test_stranger_allowed_to_purchase_token_for_purchaser_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(stranger, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': stranger, 'value': eth_cost })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_purchase_via_transfer_not_allowed_with_insufficient_funds(accounts, executor, dao_agent, helpers):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      eth_cost = eth_cost - 1e18

      helpers.fund_with_eth(purchaser, eth_cost)

      with reverts("insufficient funds"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_purchase_via_execute_purchase_not_allowed_with_insufficient_funds(accounts, executor, helpers):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      eth_cost = eth_cost - 1e18

      helpers.fund_with_eth(purchaser, eth_cost)

      with reverts("insufficient funds"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })


  def test_double_purchase_not_allowed_via_transfer(accounts, executor, helpers, ldo_token, dao_token_manager, dao_agent):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      with reverts("no allocation"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_double_purchase_not_allowed_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })

      with reverts("no allocation"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })


  def test_overpay_should_be_returned_via_transfer(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      overpay_amount = 1e18

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      initial_purchaser_balance = purchaser.balance()
      helpers.fund_with_eth(purchaser, eth_cost + overpay_amount)

      assert purchaser.balance() == initial_purchaser_balance + eth_cost + overpay_amount

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost + overpay_amount, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchaser.balance() == initial_purchaser_balance + overpay_amount

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount


  def test_overpay_should_be_returned_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      overpay_amount = 1e18

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      initial_purchaser_balance = purchaser.balance()
      helpers.fund_with_eth(purchaser, eth_cost + overpay_amount)

      assert purchaser.balance() == initial_purchaser_balance + eth_cost + overpay_amount

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost + overpay_amount })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchaser.balance() == initial_purchaser_balance + overpay_amount

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount


  def test_purchase_not_allowed_after_expiration_via_transfer(accounts, executor, helpers):
      chain = Chain()

      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()
      with reverts("offer expired"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_purchase_not_allowed_after_expiration_via_execute_purchase(accounts, executor, helpers):
      chain = Chain()

      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()

      with reverts("offer expired"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost  })


  def test_recover_unsold_tokens_not_allowed_until_exparation(executor, dao_agent):
      with reverts():
          executor.recover_unsold_tokens()


  def test_recover_unsold_tokens_should_transfer_all_tokens_after_exparation(executor, dao_agent, ldo_token):
      chain = Chain()

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()

      executor_balance = ldo_token.balanceOf(executor)
      dao_agent_balance = ldo_token.balanceOf(dao_agent)

      executor.recover_unsold_tokens()

      assert ldo_token.balanceOf(executor) == 0
      assert ldo_token.balanceOf(dao_agent) == dao_agent_balance + executor_balance
#+END_SRC
