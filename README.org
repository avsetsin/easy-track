# -*- mode: org; fill-column: 60; -*-
#+STARTUP: showall indent hidestars

* Intro

У нас есть 4 трека, каждый из них может одновременно вести
несколько голосований.

Я решил положить все настраиваемые параметры в структуру
голосования.

По сути треки отличаются только базовыми настройками этих
голосований. Мы можем сделать каждый трек отдельным
контрактом.

Для всех голосований предложение считается принятым, если до
его окончания не было получено достаточно возражений.

Tracks variants:
- validators requests
- grant distibution
- payments of rewards
- regular insurance payments

* Init

Я предполагаю, что разворачивать контракты EasyTrack-ов
будет контракт голосования DAO - тогда он и будет owner-ом
всех EasyTrack-ов. [TODO:gmm] - Проверить это.

Только ~owner~ может добавлять ~ballotMaker~-ов - адреса
тех, кто может начинать голосование.

Переменная для хранения ~owner~-а

#+BEGIN_SRC vyper :noweb-ref data
  owner: public(address)
#+END_SRC

При инициализации запоминаем, кто ~owner~:

#+BEGIN_SRC vyper :noweb-ref init
  self.owner = msg.sender
#+END_SRC

* Ownership

Проверка ~onlyOwner~:

#+NAME: only_owner
#+BEGIN_SRC vyper
  assert msg.sender == self.owner
#+END_SRC

Надо уметь трансферить ~owner~-а:

#+NAME: transfer_ownership
#+BEGIN_SRC vyper :noweb yes
  @external
  def transferOwnership(_new_owner: address):
      <<only_owner>>
      self.owner = _new_owner
#+END_SRC

[NOTE:gmm] - Кому можно создавать трек - решает
ДАО. Овнершип контракта = арагон агент (c) Vasya

* Ballot Makers

[TODO:gmm] - Для трека валидаторов нужна функция, которая
проверяет, что начинающий голосование, есть в Node Operator
Registry. Ее вызов заменит блок <<only_ballot_maker>>. См.
раздел [[*Ballot Endings][Ballot Endings]]

Для остальных треков, мы определяем HashMap в котором лежат
адреса ballot_makers, которые могут начинать
голосования. Вероятно, это адреса Gnosis Safe. Также
вероятно, что мы должны иметь возможность добавлять такие
адреса в трек и блокировать их. [TODO:gmm] - Проверить это.

#+BEGIN_SRC vyper :noweb-ref data
  ballot_makers: public(HashMap[address, bool])
#+END_SRC

Проверка, что sender есть в ~ballot maker~

#+NAME: only_ballot_maker
#+BEGIN_SRC vyper
  assert self.ballot_makers[msg.sender] == True
#+END_SRC

~Owner~ может добавлять и удалять ~ballot makers~:

#+NAME: add_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def add_ballot_maker(_param: address):
      <<only_owner>>
      self.ballot_makers[_param] = True
#+END_SRC

#+NAME: del_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def del_ballot_maker(_param: address):
      <<only_owner>>
      self.ballot_makers[_param] = False
#+END_SRC

[NOTE:gmm] - ACL тут не нужен пока (c) Vasya

* Ballot Time

Мы считаем голосование завершенным, если одно из условий
истинно:
- текущее время блока больше чем значение поля deadline
- вес возражений выше порога возражений

Для этого нам нужны соответствующие поля в структуре
голосования:

#+BEGIN_SRC vyper :noweb-ref struct_ballot
  deadline: uint256
  objections_total_weight: uint256
#+END_SRC

И функция, которая проверят, завершено ли голосование.

#+NAME: is_ballot_finished
#+BEGIN_SRC vyper
  @external
  def is_ballot_finished(_ballot_id: uint256) -> bool:
      if ( block.timestamp > self.ballots[_ballot_id].deadline ):
         return True
      if ( self.objections_threshold > self.ballots[_ballot_id].objections_total_weight ):
         return True
      return False
#+END_SRC

Для каждого трека может быть разное время голосования,
поэтому нужно поле для хранения установленного времени:

#+BEGIN_SRC vyper :noweb-ref data
  ballot_time: public(uint256)
#+END_SRC

Будем инициализировать это поле при иницализации контракта:

#+BEGIN_SRC vyper :noweb-ref init
  self.ballot_time = _ballot_time
#+END_SRC

из соответствующего параметра:

#+BEGIN_SRC vyper :noweb-ref init_params
  _ballot_time: uint256,
#+END_SRC

* Make Ballot

Голосования нумеруются начиная с единицы, текущенной номер
хранится в соотвествующей переменной:

#+BEGIN_SRC vyper :noweb-ref data
  next_ballot_index: public(uint256)
#+END_SRC

Она должна быть проинициализирована, когда контракт
создается:

#+BEGIN_SRC vyper :noweb-ref init
  self.next_ballot_index = 1
#+END_SRC

[TODO:gmm] - Возможно нужно минимальное время между
попытками одного пользователя создать новое голосование?

[TODO:gmm] - Возможно при создании голосования надо как-то
определять код, который будет выполнен, если голосование
пройдет?

Функция создания голосования:

#+NAME: make_ballot
#+BEGIN_SRC vyper :noweb yes
  @external
  def make_ballot(_ballotHash: bytes32):
      <<only_ballot_maker>>
      self.ballots[self.next_ballot_index] = Ballot({
          deadline: block.timestamp + self.ballot_time,
          objections_total_weight: 0,
          ballot_maker: msg.sender,
          snapshot_block: block.number - 1
      })
      <<set_snapshot_block>>
      log EasyTrackVoteStart(_ballotHash, self.next_ballot_index)
      self.next_ballot_index = self.next_ballot_index + 1
#+END_SRC

Для нее в структуре голосования нам нужны поля:

#+BEGIN_SRC vyper :noweb-ref struct_ballot
  ballot_maker: address
#+END_SRC

Так как мы эмитим событие, его надо объявить:

#+BEGIN_SRC vyper :noweb-ref events
  event EasyTrackVoteStart:
    ballotHash: indexed(bytes32)
    ballotId: indexed(uint256)
#+END_SRC

[NOTE:gmm] - Vasya:

Нельзя, чтобы можно было заспамить голосование, т.е. чтобы
голосующим не хватило денег или внимания чтобы остановить
плохие предложения или их часть

Можно сделать один общий на всех счетчик, который позволяет
делать голосование раз в час, тогда их будет не
более 24. Конкретное число может настраиваться (как и длина
голосования). Можно разрешать голосование раз в 4 часа -
ничего не случиться, если подождать 4 часа для старта.

Голосующая мощность = балансу на момент Х.

Идею привязывать голосование к LDO-токенам не делаем (пока).
Это все можно вынести в "планы на будущее"

* Make Ballot for Validators

[TODO:gmm] - Для validator's easy track мы хотим проверять,
что адрес, который создает голосование есть в Node Operator
Registry. См. строчку 273 в файле:
https://github.com/lidofinance/lido-dao/blob/master/contracts/0.4.24/nos/NodeOperatorsRegistry.sol

#+BEGIN_EXAMPLE solidity
  require(msg.sender == operators[_operator_id].rewardAddress, "APP_AUTH_FAILED");
#+END_EXAMPLE

Тут мы должны будем передавать operator_id в функцию
создания голосования. Мапа operators объявлена как internal,
но есть функция getNodeOperator которая view accessor для
этой мапы, и [TODO:gmm] - ее можно заюзать через интерфейс.

#+BEGIN_SRC solidity
  modifier operatorExists(uint256 _id) {
      require(_id < getNodeOperatorsCount(), "NODE_OPERATOR_NOT_FOUND");
      _;
  }

  /**
   ,* @notice Returns the n-th node operator
   ,* @param _id Node Operator id
   ,* @param _fullInfo If true, name will be returned as well
   ,*/
  function getNodeOperator(uint256 _id, bool _fullInfo) external view
      operatorExists(_id)
      returns
      (
       bool active,
       string name,
       address rewardAddress,
       uint64 stakingLimit,
       uint64 stoppedValidators,
       uint64 totalSigningKeys,
       uint64 usedSigningKeys
       )
  {
      NodeOperator storage operator = operators[_id];

      active = operator.active;
      name = _fullInfo ? operator.name : "";    // reading name is 2+ SLOADs
      rewardAddress = operator.rewardAddress;
      stakingLimit = operator.stakingLimit;
      stoppedValidators = operator.stoppedValidators;
      totalSigningKeys = operator.totalSigningKeys;
      usedSigningKeys = operator.usedSigningKeys;
  }
#+END_SRC

** Possible Attacks

Возможна атака, когда ~ballot maker~ создает много
голосований, в рассчете на то, у возражающих не хватит
стейка чтобы возразить по всем голосованиям и какая-то часть
голосований пройдет без возражений. Например, так можно
выводить деньги на грантовые программы. Даже если гранты
переводятся на мультисиг, это требует только договоренности
с владельцами мультисига, которые тоже могут иметь
заинтересованность в выводе денег.

Была идея, чтобы возможность создавать easy-track
голосования была как-то привязана к LDO-токенам.

Мы могли бы заблокировать токены двумя способами:
- перевести их на контракт, и после окончания голосования
  дать возможность забрать
- запретить их трансфер на время голосования, вызвав
  токен-менеджер (требует апгрейда токен-менеджера)

(Токен-менеджер - это контракт, который позволяет увидеть
сколько у адреса токенов, которые он пока не может
трансферить из-за вестинга. Смотреть тут:
https://github.com/aragon/aragon-apps/tree/master/apps/token-manager/contracts)

Мы не хотим апгрейдить токен-менеджер, т.к. это требует
много телодвижений с аудитом и вообще это непросто. Но если
мы захотим это делать, то можем включить нужный функционал в
другие изменения.

Еще один аспект, как минимум, по validator's easy-track:
адрес, на котором валидаторы хотят работать с изи-треком не
обязан совпадать с адресом на котором они держат
LDO-токены. Также, так как валидаторы добавляются ~owner~-ом
то им не нужен минимальный стейк для создания голосования.

Таким образом, мы контролируем тех, кто создает голосование,
и если начинается спам - оперативно удаляем его. Поэтому
дополнительные механизмы связанные с LDO-токенами не
нужны. [TODO:gmm] - Но нужен механизм отмены спаммерских
голосований тогда.

* Send objection

Возможна атака, при которой возражающий может продать
проголосовавшие жетоны и сразу же купить новые, чтобы
проголосовать снова. Это не бесплатная атака, учитывая цену
газа. В случае ее реализации DAO переходит к полноценному
голосованию по всем вопросам. Мы считаем риск небольшим и
сейчас ничего не делаем с этой угрозой.

[NOTE:gmm] Vasya:

Атака с покупкой и продажей купируется историей про баланс
на момент Х

Чтобы сделать быстрый вариант возражений, можно сразу
отменять голосование если порог перейден, чтобы поменьше
писать в storage

Общий ID голосований возможно будет удобнее для мониторинга

[TODO:gmm] - Можно смотреть снапшот баланса токенов так:

#+BEGIN_EXAMPLE solidity
  import "@aragon/minime/contracts/MiniMeToken.sol";
  uint64  snapshotBlock = getBlockNumber64() - 1;
  uint256 votingPower = token.totalSupplyAt(snapshotBlock);
#+END_EXAMPLE

Мы можем взять текущий блок минус один, и записать его в
структуру Ballot. Когда кто-то хочет проголосовать против,
мы можем узнать его баланс на момент этого блока и так
определить его power.

Нам потребуется импортировать интерфейс MiniMe token-а отсюда:
https://github.com/aragon/minime/blob/master/contracts/MiniMeToken.sol

#+BEGIN_SRC vyper :noweb-ref imports
  from vyper.interfaces import ERC20
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref interfaces
  interface MiniMe:
    def balanceOfAt(_owner: address, _blockNumber: uint256) -> uint256: view
#+END_SRC

Нужна также переменная, где лежит адрес LDO-контракта

#+BEGIN_SRC vyper :noweb-ref data
  TOKEN: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32
#+END_SRC

Тут будем хранить блок, на который считаем балансы

#+BEGIN_SRC vyper :noweb-ref struct_ballot
  snapshot_block: uint256
#+END_SRC

При создании голосования надо заполнить это поле:

#+BEGIN_SRC vyper :noweb-ref set_snapshot_block
  self.ballots[self.next_ballot_index].snapshot_block = block.number - 1
#+END_SRC

Проверка не истекло ли время голосования.

#+NAME: only_active
#+BEGIN_SRC vyper
  assert block.timestamp < self.ballots[_ballot_idx].deadline
#+END_SRC

Порог возражений:

#+BEGIN_SRC vyper :noweb-ref data
  objections_threshold: public(uint256)
#+END_SRC

Инициализация порога возражений в init

#+BEGIN_SRC vyper :noweb-ref init_params
  _objections_threshold: uint256,
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref init
  self.objections_threshold = _objections_threshold
#+END_SRC


Проверка, достаточно ли уже возражений

#+NAME: objections_not_enough
#+BEGIN_SRC vyper
  assert self.ballots[_ballot_idx].objections_total_weight < self.objections_threshold
#+END_SRC

Функция возражения, работает только до дедлайна и пока
возражений недостаточно:

[TODO:gmm] - Надо считать в процентах от totalSupplyAt но
это чуть дороже по газу. "Objections_threshold должен быть в
процентах от voting power, а не абсолютное число. потому что
total voting power будет меняться во времени" (с) Sam

#+NAME: send_objection
#+BEGIN_SRC vyper :noweb yes
  @external
  def sendObjection(_ballot_idx: uint256):
      <<only_active>>
      <<objections_not_enough>>
      _voting_power: uint256 = MiniMe(TOKEN).balanceOfAt(msg.sender, self.ballots[_ballot_idx].snapshot_block)
      self.objections[_ballot_idx][msg.sender] = _voting_power
      self.ballots[_ballot_idx].objections_total_weight = _voting_power + self.ballots[_ballot_idx].objections_total_weight
      log Objection(msg.sender, _voting_power)
#+END_SRC

Мы не можем иметь мапу в структуре голосования, которая
хранит возражения, поэтому их придется хранить отдельнно в
storage переменной:

#+BEGIN_SRC vyper :noweb-ref data
  objections: HashMap[uint256, HashMap[address, uint256]]
#+END_SRC

Не забудем объявить event:

#+BEGIN_SRC vyper :noweb-ref events
  event Objection:
    sender: indexed(address)
    power: uint256
#+END_SRC

[TODO:gmm] Если нельзя иметь HashMap в структуре, то можно в
отдельной переменной сделать HashMap от HashMap-а

[TODO:gmm] Посмотреть что такое allowance и permit
(подписанные сообщения разрешающие тратить) в контексте
траты токенов. Где смотреть?

[TODO:gmm] Возможно айди голосования лучше сделать общим для
всех треков через наследование или базовый контракт - factory

[TODO:gmm] Внимательно прочесть MiniMi-контракт, объявить
его интерфейс, приводить к нему и заюзать

* Ballot

Голосования лежат в мапе, где ключ - индекс голосования, а
значение - структура голосования:

#+BEGIN_SRC vyper :noweb-ref data
  ballots: public(HashMap[uint256, Ballot])
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref structs :noweb yes
  struct Ballot:
    <<struct_ballot>>
#+END_SRC

* Ballot Endings

[TODO:gmm] - Таймаут между изи-треками

Считаем, что у нас есть функция, которую можно вызвать, и
она сработает, если время голосования прошло, а возражений
поступило недостаточно.

[TODO:gmm] - Как задавать эту функцию коссвенно? В новом
оракуле есть кусок, который позволяет зашивать произвольный
смарт-контракт и дергать его - посмотреть как это
сделано. Надо вызвать функцию, которая переведет деньги. В
LIDO DAO есть адреса арагоновских проксиков, в арагоне
написано как это работает (etherscan). CallData определяет
что именно дергать.  Посмотреть как у арагона это
сделано. Посмотреть что происходит при enacting голосования
арагона в LIDO DAO, и в код арагона на etherscan

#+NAME: ballot_result
#+BEGIN_SRC vyper :noweb yes
  @external
  def ballotResult(_ballot_idx: uint256):
      assert block.timestamp > self.ballots[_ballot_idx].deadline
      <<objections_not_enough>>
      log EnactBallot(_ballot_idx)
#+END_SRC

Если голосование завершено, то здесь нужен event:

#+BEGIN_SRC vyper :noweb-ref events
  event EnactBallot:
    idx: indexed(uint256)
#+END_SRC

[NOTE:gmm] - Vasya:

Два варианта:
- Простой способ - вызывать любую функцию от имени
  агента. Небезопасно, но просто можно стащить функцию из
  арагона и использовать ее (Forward...) Но тогда нужен
  хороший мониторинг, который будет следить, алертить,
  кидать в телеграмм.
- Сложный способ - ограничить возможности вызываемых функций
  (операторы могут только в ключи, гранты только переводить
  фонды и.т.п). Это интереснее.

* Other task and todoes

[TODO:gmm] - Разобраться, как можно интегрироваться со
всеобщим голосованием DAO

Какой план на апгрейды с curve?

[TODO:gmm] - Как проводить экзекьющен чтобы отдельные треки
имели раздельные полномочия, acl

Говерментс (проблемы обговорили)

Upgradable не нужен. Вместо него сансетим изитрек и заводим
новый. Параметры однако может быть нуждаются в изменениях.

Но может и стоит.

Или можно сделать через паттерн "Делегат" - какую функцию
они могут вызвать чтобы проверить можно ли делать это
голосование.

Самая интересная часть, над которой можно думать.

[TODO:gmm] - В ldo-purchase-executor/script/deploy.py есть
функция deploy_and_start_dao_vote надо посмотреть можно по
ней что-то понять. Там же есть про деплой контракта и как
проголосовать (отправить возражение) в dao_voting.vote()
есть что-то, что, вероятно, поможет написать тесты.

[TODO:gmm] - Кроме покупки страховки команда Meter
выкатывала одно голосование за 4 разные вещи -
посмотреть. Можно оттуда скопипастить. Где этот код?

[TODO:gmm] - Как мне представиться контрактом голосования
DAO, чтобы протестить это? Как написать такой тест?

[TODO:gmm] regular insurance payments Тут надо делать вызов
вручную раз в полгода

* Tangle

#+BEGIN_SRC vyper :noweb yes :tangle ./contracts/ValidatorsVote.vy
    # @version 0.2.8
    # @author Lido <info@lido.fi>
    # @licence MIT
    <<imports>>

    <<interfaces>>

    <<events>>

    <<structs>>

    <<data>>

    @external
    def __init__(
        <<init_params>>
        _stub: bool
        ):
        <<init>>

    <<transfer_ownership>>

    <<add_ballot_maker>>

    <<del_ballot_maker>>

    <<make_ballot>>

    <<is_ballot_finished>>

    <<withdraw_ballot_stake>>

    <<send_objection>>

    <<ballot_result>>
#+END_SRC

* Tests
** Common part - deploy and pass vote

Когда я делаю тест я хочу в каждом тесте:
- развернуть изи-трек
- создать голосование
- выполнить голосование
Для этого служит fixture
~deploy_executor_and_pass_easy_track_vote~, которая
возвращает лямбду. Эта лямбда будет вызвана в каждом
последующем тесте.

Так как fixture напоминает макрос, нужно, чтобы ее параметры
тоже были fixtures.

#+NAME: deploy_executor_and_pass_easy_track_vote
#+BEGIN_SRC python :noweb yes
  @pytest.fixture(scope='module')
  def fx_ballot_maker(accounts):
    return accounts.at('0xAD4f7415407B83a081A0Bee22D05A8FDC18B42da', force=True)

  @pytest.fixture(scope='module')
  def fx_ballot_time():
    return 1

  @pytest.fixture(scope='module')
  def fx_objections_threshold():
    return 2

  @pytest.fixture(scope='module')
  def fx_stub():
    return True

  @pytest.fixture(scope='module')
  def deploy_executor_and_pass_easy_track_vote(
          fx_ballot_maker,
          fx_ballot_time,
          fx_objections_threshold,
          fx_stub
          ):
      def la_lambda():
        (executor, vote_id) = deploy_and_start_easy_track_vote(
            {'from': fx_ballot_maker}, # TODO: ACL
            ballot_maker=fx_ballot_maker,
            ballot_time=fx_ballot_time,
            objections_threshold=fx_objections_threshold,
            stub=fx_stub
        )
        print(f'vote id: {vote_id}')
        # TODO: определить аккаунты, которые будут голосовать
        # Wait for the vote to end
        chain.sleep(3 * 60 * 60 * 24)
        chain.mine()
        print(f'vote executed')
        # Ret
        return executor

      return la_lambda
#+END_SRC

Внутри возвращаемой лямбды вызывается функция
~deploy_and_start_easy_track_vote~, которая:
- разворачивает easy_track
- добаляет ballot_makers
- создает голосование.

Она должна вернуть развернутый контракт и ~vote-id~.

#+NAME: deploy_and_start_easy_track_vote
#+BEGIN_SRC python :noweb yes
  def deploy_and_start_easy_track_vote(
          tx_params,
          ballot_maker,
          ballot_time,
          objections_threshold,
          stub
          ):
      # Deploy EasyTrack
      executor = ValidatorsVote.deploy(
          ballot_time,
          objections_threshold,
          stub,
          tx_params,
          )
      # Add BallotMaker
      executor.add_ballot_maker(ballot_maker, tx_params)
      tx = executor.make_ballot(
          1,
          tx_params
          )
      # Debug out
      tx.info()
      # Get vote_id
      vote_id = tx.events['EasyTrackVoteStart']['ballotId']
      # Ret
      return (executor, vote_id)
#+END_SRC

** Test example

#+BEGIN_SRC python :noweb yes :tangle ./tests/test_validators_vote.py
  import pytest
  from brownie import Wei, chain, reverts
  from brownie.network.state import Chain
  from brownie import accounts
  from brownie import ValidatorsVote

  <<deploy_and_start_easy_track_vote>>

  <<deploy_executor_and_pass_easy_track_vote>>

  def test_example(deploy_executor_and_pass_easy_track_vote):
      print("DBG : test is running...")
      deploy_executor_and_pass_easy_track_vote()
      # Чтобы тест упал и я увидел отладочные сообщения
      # assert 0 == 1
      with reverts():
          accounts[0].transfer(accounts[1], "10 ether", gas_price=0)
#+END_SRC

** Test plan

Нужны приемочные тесты (сценарии):

*** Dao-voting

Надо эмулировать DAO-voting в тестах, чтобы развернуть Easy
Track.

[TODO:gmm] - Я предполагаю что для DAO-голосования нужен
файл интерефейса, который я могу взять из
~ldo-purchase-executor/intrfaces~. Я его объявляю:

#+BEGIN_SRC python
  # Lido DAO Vault (Agent) contract
  interface Vault:
      def deposit(_token: address, _value: uint256): payable
#+END_SRC

Я нашел соответствие ему в ~interfaces/Agent.json~:

#+BEGIN_SRC js
  ...
  {
      "constant": false,
      "inputs": [
          {
              "name": "_token",
              "type": "address"
          },
          {
              "name": "_value",
              "type": "uint256"
          }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
  }
  ...
#+END_SRC

[TODO:gmm] - Не очень понять при чем тут ~deposit~.

Вот так он вызывается:

#+BEGIN_SRC vyper
  Vault(LIDO_DAO_VAULT).deposit(
      LIDO_DAO_VAULT_ETH_TOKEN,
      eth_cost,
      value=eth_cost
  )
#+END_SRC

[TODO:gmm] - Есть образец эмуляции дао-голосования в
~conftest~, который выглядит так (я не понимаю как он
работает).

Там есть:
- промотка времени (chain.sleep):
- обращение через интерфейс в фикстурах (как работает?)

#+BEGIN_SRC python
  lido_dao_voting_address = '0x2e59A20f205bB85a89C53f1936454680651E618e'

  @pytest.fixture(scope='module')
  def dao_voting(interface):
      return interface.Voting(lido_dao_voting_address)

  # together these accounts hold 15% of LDO total supply
  ldo_holders = [
      '0x3e40d73eb977dc6a537af587d48316fee66e9c8c',
      '0xb8d83908aab38a159f3da47a59d84db8e1838712',
      '0xa2dfc431297aee387c05beef507e5335e684fbcd'
  ]

  for holder_addr in ldo_holders:
      print('voting from acct:', holder_addr)
      accounts[0].transfer(holder_addr, '0.1 ether')
      account = accounts.at(holder_addr, force=True)
      dao_voting.vote(vote_id, True, False, {'from': account})

  # wait for the vote to end
  chain.sleep(3 * 60 * 60 * 24)
  chain.mine()

  assert dao_voting.canExecute(vote_id)
  dao_voting.executeVote(vote_id, {'from': accounts[0]})

  print(f'vote executed')

  total_ldo_assignment = sum([ p[1] for p in ldo_purchasers ])
  assert ldo_token.balanceOf(executor) == total_ldo_assignment

  ldo_assign_role = dao_token_manager.ASSIGN_ROLE()
  assert dao_acl.hasPermission(executor, dao_token_manager, ldo_assign_role)

  return executor
#+END_SRC

*** Deploy Easy Track

[TODO:gmm] - Как мне обращаиться к Node Operator Registry и
Gnosis Safe чтобы извлечь тех, кто может создавать Easy
Track Voting?

[TODO:gmm] - Как работает ACL и как я могу использовать это
для Easy Track?

*** Send Objections
*** Finish Voting
*** Calculate results
* Other

- Brownie сам качает нужную версию Vyper
- Brownie имеет brownie-config, где можно указать архивную
  ноду для форкинга из майнета.
- Можно прикинуться любым из адресов (как?)
- Если в brownie console написать chain[-1] можно получить
  последний блок. Из консоли можно сделать
  ex=ContractName.deploy(...)
- Когда я хочу вызвать другой контракт, я объявляют
  интерфейс, потом беру адрес этого контракта, привожу его к
  интерфейсу и вызываю функцию контракта:
  MyIface(addr).func(..) Если в вызове есть типы данных,
  которые не поддерживаются в вайпер, то используем raw_call
- [TODO:gmm] Мне надо как-то получить Node Operator Registry в папку
  interfaces - сгенерировать ABI из исходного кода или взять
  на Etherscan
- deploy_and_start_dao_voting эмулирует голосование DAO
- brownie run позволяет вызвать любой скрипт (например для
  деплоя)
- brownie accounts list показывает аккаунты (см. доки)
- администратор контракта (dao agent app) должен
  устанавливать список разрешенных адресов - например гносис
  сэйф, чтобы выполнять операции.
- Есть репа stacking_rewards где можно подстмотреть про
  время голосования на высоте блока и таймштампах. vyper
  current block time etc
- Энактинг голосования смотреть в репке нового оракула
- Перемотка времени - гугл brownie test time

Тут конфиг, в нем куски оставлены как пример фикстур

#+BEGIN_SRC python :noweb yes :tangle ./tests/conftest.py :exports none
  import pytest
  from brownie import chain, Wei, ZERO_ADDRESS

  @pytest.fixture(scope="function", autouse=True)
  def shared_setup(fn_isolation):
      pass

  @pytest.fixture(scope='module')
  def ldo_holder(accounts):
      return accounts.at('0xAD4f7415407B83a081A0Bee22D05A8FDC18B42da', force=True)


  @pytest.fixture(scope='module')
  def dao_acl(interface):
      return interface.ACL(lido_dao_acl_address)

  @pytest.fixture(scope='module')
  def dao_voting(interface):
      return interface.Voting(lido_dao_voting_address)


  @pytest.fixture(scope='module')
  def dao_token_manager(interface):
      return interface.TokenManager(lido_dao_token_manager_address)

  # Lido DAO Agent app
  @pytest.fixture(scope='module')
  def dao_agent(interface):
      return interface.Agent(lido_dao_agent_address)


  @pytest.fixture(scope='module')
  def ldo_token(interface):
      return interface.ERC20(ldo_token_address)
#+END_SRC

#+BEGIN_SRC python :noweb yes :tangle ./scripts/deploy.py :exports none
  from brownie import ZERO_ADDRESS, accounts
#+END_SRC
