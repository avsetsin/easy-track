# -*- mode: org; fill-column: 60; -*-
#+STARTUP: showall indent hidestars

* Intro

У нас есть 4 трека, каждый из них может одновременно вести
несколько голосований.

Я пока не придумал ничего лучше, чем положить все
настраиваемые параметры в структуру голосования.

По сути треки отличаются только базовыми настройками этих
голосований.

Для всех голосований Предложение считается принятым, если до
его окончания не было получено достаточно возражений.

Tracks variants:
- validators requests
- grant distibution
- payments of rewards
- regular insurance payments

* Init

При инициализации запоминаем, кто ~owner~:

#+BEGIN_SRC vyper :noweb-ref data
  owner: public(address)
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref init
  self.owner = msg.sender
#+END_SRC

[TODO:gmm] - Init нужен чтобы определить, кто может
добавлять тех, кому разрешено начинать голосование. По идее,
только контракт всеобщего голосования DAO может сделать это.

* Ownership

Мы можем проверять ~onlyOwner~:

#+NAME: only_owner
#+BEGIN_SRC vyper
  assert msg.sender = self.owner
#+END_SRC

Надо уметь трансферить ~owner~-а:

#+NAME: transfer_ownership
#+BEGIN_SRC vyper :noweb yes
  @external
  def transferOwnership(_newOwner: address):
      <<only_owner>>
      self.owner = _newOwner
#+END_SRC

* Ballot Makers

Только "узкий круг ограниченных людей" может начинать
голосования. Храним их в мапе:

#+BEGIN_SRC vyper :noweb-ref data
  ballotMakers: public(HashMap[address, bool])
#+END_SRC

Проверка, что начинающий голосование, относится к этому
кругу людей:

#+NAME: only_ballot_maker
#+BEGIN_SRC vyper
  assert ballotMakers[msg.sender] = True
#+END_SRC

~Owner~ может добавлять и удалять ~ballot makers~:

#+NAME: add_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def addBallotMaker(_param: address):
      <<only_owner>>
      ballotMakers[_param] = True
#+END_SRC

#+NAME: del_ballot_maker
#+BEGIN_SRC vyper :noweb yes
  @external
  def delBallotMaker(_param: address):
      <<only_owner>>
      ballotMakers[_param] = False
#+END_SRC

* Ballot Time

Для разных треков разное время, но пока так:

#+BEGIN_SRC vyper :noweb-ref data
ballotTime: public(timedelta)
#+END_SRC

* Ballot Stake

Ballot maker мог бы спамить голосованиями, а учитывая что
они по умолчанию проходят, этого нельзя допускать.

Мы хотим, чтобы возможность создавать easy-track голосования
была как-то привязана к LDO-токенам. При этом, LDO-токены,
которые иницировали голосование, не должны иметь возможность
инициировать второе голосование, пока первое не закончилось.

Возможна атака, при которой возражающий может продать
проголосовавшие жетоны и сразу же купить новые, чтобы
проголосовать снова. Чтобы этого не произошло, в контракте
easy-track необходимо обратиться к менеджеру токенов, чтобы
запретить передачу этих токенов до конца голосования. Но это
вызывает проблемы с аудитом и обновлением LDO-контракта,
чего хочется избежать.

Можно использовать остатки на момент блока, в котором
началось голосование. То есть голосовать могут только
жетоны, которые не были перемещены с момента начала
голосования. Мне показалось это сложным в реализации.

Поэтому мы требуем замораживать токены в голосовании - когда
ballot maker начинает голосование, ему нужно приложить
токены, чтобы нельзя было создавать слишком много
голосований. Порог, ниже которого голосование не начнется:

#+BEGIN_SRC vyper :noweb-ref data
  minBallotStake: public(decimal)
#+END_SRC

Проверка, что стейка достаточно для начала голосования. Тут
мы считаем, что порог общий для всех голосований во всех
треках.

#+NAME: only_sufficient_stake
#+BEGIN_SRC vyper
  assert msg.value >= self.minBallotStake
#+END_SRC

[NOTE:gmm] - Возможна атака, когда ~ballot maker~ создает
много голосований, в рассчете на то, у возражающих не хватит
стейка чтобы возразить по всем голосованиям и какая-то часть
голосований пройдет без возражений. Например, так можно
вывести деньги на грантовые программы. Даже если гранты
переводятся на мультисиг, это требует только договоренности
с владельцами мультисига, которые тоже могут иметь
заинтересованность в выводе денег.

* Ballot

Голосования лежат в мапе, где ключ - хэш голосования, а
значение - структура голосования:

#+BEGIN_SRC vyper :noweb-ref data
  ballots: public(HashMap[string[255], Ballot])
#+END_SRC

#+BEGIN_SRC vyper :noweb-ref structs
  struct Ballot:
    name: string[255]
    ballotMaker: address
    ballotMakerStake: wei_value
    deadline: timestamp
    objections: HashMap(address, wei_value)
    objections_total: wei_value
#+END_SRC

* Make Ballot

Функция для начала голосования, после проверок создает
новый Ballot:

Проверка, нет ли уже такого голосования. Она нужна,
т.к. если не проверить, то новое голосование затрет
предыдущее.

#+NAME: is_ballot_not_exists
#+BEGIN_SRC vyper
  assert self.ballots[_name] = False
#+END_SRC

[VRFY:gmm] - Возможно нужно минимальное время между
попытками одного пользователя создать новое голосование?

Когда Ballot maker отдает нам свой стейк мы должны
запомнить, сколько он застейкал, чтобы потом разрешить ему
вернуть эту сумму.

#+NAME: save_ballot_stake
#+BEGIN_SRC vyper
  self.ballots[_name].ballotMakerStake = msg.value
#+END_SRC

После окончания голосования, нужно разрешать вернуть стейк
ballotMaker-у, но только всю сумму разом и только один раз.

#+NAME: withdraw_ballot_stake
#+BEGIN_SRC vyper
  @external
  def withdrawBallotStake(_name: string[255]):
      assert self.ballots[_name].active = False
      assert self.ballots[_name].ballotMakerStake > 0
      _ballotMaker = self.ballots[_name].ballotMaker
      _amount: wei_value = self.ballots[_name].ballotMakerStake
      self.ballots[_name].ballotMakerStake = 0
      send(_ballotMaker, _amount)
#+END_SRC

Функция создания голосования:

#+NAME: make_ballot
#+BEGIN_SRC vyper :noweb yes
  @public
  @payable
  def make_ballot(_name: string[255]):
      <<only_ballot_maker>>
      <<only_sufficient_stake>>
      <<is_ballot_not_exists>>
      self.ballots[_name] = Ballot({
          name = _name,
          active = True,
          ballotMaker = msg.sender
          deadline = block.timestamp + self.ballotTime,
          result = True
      })
      <<save_ballot_stake>>
#+END_SRC

* Send objection

Проверка не истекло ли время голосования.

#+NAME: only_active
#+BEGIN_SRC vyper
  assert block.timestamp < self.ballots[_name].deadline
#+END_SRC

Порог возражений:

#+BEGIN_SRC vyper :noweb-ref data
  objections_threshold: public(wei_value)
#+END_SRC

Проверка, достаточно ли уже возражений

#+NAME: objections_not_enough
#+BEGIN_SRC vyper
  assert self.ballots[_name].objections_total < self.objections_threshold
#+END_SRC

Функция возражения, работает только до дедлайна и пока
возражений недостаточно:

#+NAME: send_objection
#+BEGIN_SRC vyper :noweb yes
  @public
  @payable
  def sendObjection(_name: string[266]):
      <<only_active>>
      <<objections_not_enough>>
      self.ballots[_name].objections[msg.sender] = msg.value
      _total = self.ballots[_name].objections_total
      self.ballots[_name].objections_total = total + msg.value
#+END_SRC

* Ballot Endings

Считаем, что у нас есть функция, которую можно вызвать, и
она сработает, если время голосования прошло, а возражений
поступило недостаточно.

[TODO:gmm] - Как задавать эту функцию коссвенно? В новом
оракуле есть кусок, который позволяет зашивать проивольный
смарт-контракт и дергать его - посмотреть как это
сделано. Надо вызвать функцию, которая переведет
деньги. Читать как сделано в арагоне. В lido dao есть адреса
арагоновских проксиков, в арагоне написано как это работает
(etherscan) CallData определяет что именно дергать. Также
посмотреть как у арагона это сделано? Посмотреть что
происходит при enacting голосования арагона в lido DAO, код
арагона на etherscan

#+NAME: ballot_result
#+BEGIN_SRC vyper :noweb yes
  @external
  def ballotResult()
      assert block.timestamp > self.ballots[_name].deadline
      <<objections_not_enough>>
      some_action_stub()
#+END_SRC

[TODO:gmm] - Если голосование завершено, то здесь нужен
event

* Other task and todoes

[TODO:gmm] - В ldo-purchase-executor/script/deploy.py есть
функция deploy_and_start_dao_vote надо посмотреть можно по
ней что-то понять. Там же есть про деполой контракта и как
проголосовать (отправить возражение) в dao_voting.vote()
есть что-то что вероятно поможет написать тесты.

[TODO:gmm] - Кроме покупки страховки команда Meter
выкатывала одно голосование за 4 разные вещи -
посмотреть. Можно оттуда скопипастить.

[TODO:gmm] - Как мне представиться контрактом голосования
DAO, чтобы протестить это? Как написать такой тест? Как-то
так?

#+BEGIN_SRC vyper
  # Lido DAO Vote contract
  interface DaoVote:
      def someFunc(_someparam: someType): payable
      ...
#+END_SRC

[TODO:gmm] grant distibution - Голосование начинается, если
удовлетворены требования пороговой подписи K из N

[TODO:gmm] regular insurance payments Тут надо делать вызов
вручную раз в полгода

* Tangle

** validator's requests contract

Сделаем генерацию контракта для validator's requests

#+NAME: validators_contract
#+BEGIN_SRC vyper :noweb yes :tangle ./contracts/ValidatorsVote.vy
  # @version 0.2.8
  # @author Lido <info@lido.fi>
  # @licence MIT
  from vyper.interfaces import ERC20

  <<structs>>

  <<data>>

  @external
  def __init__():
      <<init>>

  <<transfer_ownership>>

  <<add_ballot_maker>>

  <<del_ballot_maker>>

  <<make_ballot>>

  <<withdraw_ballot_stake>>

  <<send_objection>>

  <<ballot_result>>
#+END_SRC

** test for validator's requests contract

Это заготовки для тестов.

Когда я делаю тест я хочу:
- развернуть изи-трек
- создать голосование
- закинуть возражение
- завершить голосование (как ускорить его?)
- посчитать результаты
- убедиться, что посчитано верно

Нужны приемочные тесты (сценарии):
- что изи-трек разворачивается
- что голосование создается
- что голосование реагирует на возражения
- что оно завершается (промотать время brownie test time
  прямо из теста)

#+BEGIN_SRC python :noweb yes :tangle ./tests/conftest.py :exports none
  import pytest
  from brownie import chain, Wei, ZERO_ADDRESS

  from scripts.deploy import deploy_and_start_dao_vote

  from utils.config import (
      ldo_token_address,
      lido_dao_acl_address,
      lido_dao_agent_address,
      lido_dao_voting_address,
      lido_dao_token_manager_address
  )


  @pytest.fixture(scope="function", autouse=True)
  def shared_setup(fn_isolation):
      pass


  @pytest.fixture(scope='module')
  def ldo_holder(accounts):
      return accounts.at('0xAD4f7415407B83a081A0Bee22D05A8FDC18B42da', force=True)


  @pytest.fixture(scope='module')
  def dao_acl(interface):
      return interface.ACL(lido_dao_acl_address)


  @pytest.fixture(scope='module')
  def dao_voting(interface):
      return interface.Voting(lido_dao_voting_address)


  @pytest.fixture(scope='module')
  def dao_token_manager(interface):
      return interface.TokenManager(lido_dao_token_manager_address)


  # Lido DAO Agent app
  @pytest.fixture(scope='module')
  def dao_agent(interface):
      return interface.Agent(lido_dao_agent_address)


  @pytest.fixture(scope='module')
  def ldo_token(interface):
      return interface.ERC20(ldo_token_address)


  class Helpers:
      eth_banker = None

      @staticmethod
      def fund_with_eth(addr, amount = '1000 ether'):
          Helpers.eth_banker.transfer(to=addr, amount=amount)

      @staticmethod
      def filter_events_from(addr, events):
        return list(filter(lambda evt: evt.address == addr, events))

      @staticmethod
      def assert_single_event_named(evt_name, tx, evt_keys_dict = None):
        receiver_events = Helpers.filter_events_from(tx.receiver, tx.events[evt_name])
        assert len(receiver_events) == 1
        if evt_keys_dict is not None:
          assert dict(receiver_events[0]) == evt_keys_dict
        return receiver_events[0]


  @pytest.fixture(scope='module')
  def helpers(accounts):
      Helpers.eth_banker = accounts.at('0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8', force=True)
      return Helpers


  @pytest.fixture(scope='module')
  def deploy_executor_and_pass_dao_vote(accounts, ldo_holder, ldo_token, dao_acl, dao_voting, dao_token_manager):
      def deploy(
          eth_to_ldo_rate,
          vesting_cliff_delay,
          vesting_end_delay,
          offer_expiration_delay,
          ldo_purchasers,
          allocations_total
      ):
          (executor, vote_id) = deploy_and_start_dao_vote(
              {'from': ldo_holder},
              eth_to_ldo_rate=eth_to_ldo_rate,
              vesting_cliff_delay=vesting_cliff_delay,
              vesting_end_delay=vesting_end_delay,
              offer_expiration_delay=offer_expiration_delay,
              ldo_purchasers=ldo_purchasers,
              allocations_total=allocations_total
          )

          print(f'vote id: {vote_id}')

          # together these accounts hold 15% of LDO total supply
          ldo_holders = [
              '0x3e40d73eb977dc6a537af587d48316fee66e9c8c',
              '0xb8d83908aab38a159f3da47a59d84db8e1838712',
              '0xa2dfc431297aee387c05beef507e5335e684fbcd'
          ]

          for holder_addr in ldo_holders:
              print('voting from acct:', holder_addr)
              accounts[0].transfer(holder_addr, '0.1 ether')
              account = accounts.at(holder_addr, force=True)
              dao_voting.vote(vote_id, True, False, {'from': account})

          # wait for the vote to end
          chain.sleep(3 * 60 * 60 * 24)
          chain.mine()

          assert dao_voting.canExecute(vote_id)
          dao_voting.executeVote(vote_id, {'from': accounts[0]})

          print(f'vote executed')

          total_ldo_assignment = sum([ p[1] for p in ldo_purchasers ])
          assert ldo_token.balanceOf(executor) == total_ldo_assignment

          ldo_assign_role = dao_token_manager.ASSIGN_ROLE()
          assert dao_acl.hasPermission(executor, dao_token_manager, ldo_assign_role)

          return executor

      return deploy
#+END_SRC

#+BEGIN_SRC python :noweb yes :tangle ./tests/test_validators_vote.py :exports none
  import pytest
  from brownie import Wei, chain, reverts
  from brownie.network.state import Chain

  from purchase_config import ETH_TO_LDO_RATE_PRECISION

  LDO_ALLOCATIONS = [
      1_000 * 10**18,
      3_000_000 * 10**18,
      20_000_000 * 10**18
  ]

  # 100 LDO in one ETH
  ETH_TO_LDO_RATE = 100 * 10**18

  VESTING_CLIFF_DELAY = 1 * 60 * 60 * 24 * 365 # one year
  VESTING_END_DELAY = 2 * 60 * 60 * 24 * 365 # two years
  OFFER_EXPIRATION_DELAY = 2629746 # one month


  @pytest.fixture(scope='function')
  def executor(accounts, deploy_executor_and_pass_dao_vote):
      return deploy_executor_and_pass_dao_vote(
          eth_to_ldo_rate=ETH_TO_LDO_RATE,
          vesting_cliff_delay=VESTING_CLIFF_DELAY,
          vesting_end_delay=VESTING_END_DELAY,
          offer_expiration_delay=OFFER_EXPIRATION_DELAY,
          ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
          allocations_total=sum(LDO_ALLOCATIONS)
      )


  def test_deploy_should_fails_on_wrong_allocations_total(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS) + 1
          )


  def test_deploy_should_fails_on_zero_rate(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=0,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_vesting_ends_before_cliff(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_CLIFF_DELAY - 1,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_zero_offer_exparation_delay(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=0,
              ldo_purchasers=[ (accounts[i], LDO_ALLOCATIONS[i]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_deploy_should_fails_on_purchasers_duplicates(accounts, deploy_executor_and_pass_dao_vote):
      with reverts():
          deploy_executor_and_pass_dao_vote(
              eth_to_ldo_rate=ETH_TO_LDO_RATE,
              vesting_cliff_delay=VESTING_CLIFF_DELAY,
              vesting_end_delay=VESTING_END_DELAY,
              offer_expiration_delay=OFFER_EXPIRATION_DELAY,
              ldo_purchasers=[ (accounts[0], LDO_ALLOCATIONS[0]) for i in range(0, len(LDO_ALLOCATIONS)) ],
              allocations_total=sum(LDO_ALLOCATIONS)
          )


  def test_purchase_via_transfer(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_purchase_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_stranger_not_allowed_to_purchase_via_execute_purchase(accounts, executor, helpers):
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(stranger)
      assert allocation[0] == 0
      assert allocation[1] == 0

      helpers.fund_with_eth(stranger, eth_cost)

      with reverts("no allocation"):
          executor.execute_purchase(stranger, { 'from': stranger, 'value': eth_cost })


  def test_stranger_not_allowed_to_purchase_via_transfer(accounts, executor, helpers):
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      allocation = executor.get_allocation(stranger)
      assert allocation[0] == 0
      assert allocation[1] == 0

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      helpers.fund_with_eth(stranger, eth_cost)

      with reverts("no allocation"):
          executor.execute_purchase(stranger, { 'from': stranger, 'value': eth_cost })


  def test_stranger_allowed_to_purchase_token_for_purchaser_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token, dao_token_manager):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]
      stranger = accounts.at(accounts[5], force=True)

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(stranger, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': stranger, 'value': eth_cost })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      vesting = dao_token_manager.getVesting(purchaser, purchase_evt['vesting_id'])

      assert vesting['amount'] == purchase_ldo_amount
      assert vesting['start'] == tx.timestamp
      assert vesting['cliff'] == tx.timestamp + VESTING_CLIFF_DELAY
      assert vesting['vesting'] == tx.timestamp + VESTING_END_DELAY
      assert vesting['revokable'] == False


  def test_purchase_via_transfer_not_allowed_with_insufficient_funds(accounts, executor, dao_agent, helpers):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      eth_cost = eth_cost - 1e18

      helpers.fund_with_eth(purchaser, eth_cost)

      with reverts("insufficient funds"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_purchase_via_execute_purchase_not_allowed_with_insufficient_funds(accounts, executor, helpers):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      eth_cost = eth_cost - 1e18

      helpers.fund_with_eth(purchaser, eth_cost)

      with reverts("insufficient funds"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })


  def test_double_purchase_not_allowed_via_transfer(accounts, executor, helpers, ldo_token, dao_token_manager, dao_agent):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount

      with reverts("no allocation"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_double_purchase_not_allowed_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })

      with reverts("no allocation"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost })


  def test_overpay_should_be_returned_via_transfer(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      overpay_amount = 1e18

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      initial_purchaser_balance = purchaser.balance()
      helpers.fund_with_eth(purchaser, eth_cost + overpay_amount)

      assert purchaser.balance() == initial_purchaser_balance + eth_cost + overpay_amount

      dao_eth_balance_before = dao_agent.balance()

      tx = purchaser.transfer(to=executor, amount=eth_cost + overpay_amount, gas_limit=400_000)
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchaser.balance() == initial_purchaser_balance + overpay_amount

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount


  def test_overpay_should_be_returned_via_execute_purchase(accounts, executor, dao_agent, helpers, ldo_token):
      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      overpay_amount = 1e18

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      initial_purchaser_balance = purchaser.balance()
      helpers.fund_with_eth(purchaser, eth_cost + overpay_amount)

      assert purchaser.balance() == initial_purchaser_balance + eth_cost + overpay_amount

      dao_eth_balance_before = dao_agent.balance()

      tx = executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost + overpay_amount })
      purchase_evt = helpers.assert_single_event_named('PurchaseExecuted', tx)

      assert purchaser.balance() == initial_purchaser_balance + overpay_amount

      assert purchase_evt['ldo_receiver'] == purchaser
      assert purchase_evt['ldo_allocation'] == purchase_ldo_amount
      assert purchase_evt['eth_cost'] == eth_cost

      dao_eth_balance_increase = dao_agent.balance() - dao_eth_balance_before
      assert dao_eth_balance_increase == eth_cost
      assert ldo_token.balanceOf(purchaser) == purchase_ldo_amount


  def test_purchase_not_allowed_after_expiration_via_transfer(accounts, executor, helpers):
      chain = Chain()

      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()
      with reverts("offer expired"):
          purchaser.transfer(to=executor, amount=eth_cost, gas_limit=400_000)


  def test_purchase_not_allowed_after_expiration_via_execute_purchase(accounts, executor, helpers):
      chain = Chain()

      purchaser = accounts.at(accounts[0], force=True)
      purchase_ldo_amount = LDO_ALLOCATIONS[0]

      eth_cost = purchase_ldo_amount * ETH_TO_LDO_RATE_PRECISION // ETH_TO_LDO_RATE

      allocation = executor.get_allocation(purchaser)
      assert allocation[0] == purchase_ldo_amount
      assert allocation[1] == eth_cost

      helpers.fund_with_eth(purchaser, eth_cost)

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()

      with reverts("offer expired"):
          executor.execute_purchase(purchaser, { 'from': purchaser, 'value': eth_cost  })


  def test_recover_unsold_tokens_not_allowed_until_exparation(executor, dao_agent):
      with reverts():
          executor.recover_unsold_tokens()


  def test_recover_unsold_tokens_should_transfer_all_tokens_after_exparation(executor, dao_agent, ldo_token):
      chain = Chain()

      expiration_delay = executor.offer_expires_at() - chain.time()
      chain.sleep(expiration_delay + 3600)
      chain.mine()

      executor_balance = ldo_token.balanceOf(executor)
      dao_agent_balance = ldo_token.balanceOf(dao_agent)

      executor.recover_unsold_tokens()

      assert ldo_token.balanceOf(executor) == 0
      assert ldo_token.balanceOf(dao_agent) == dao_agent_balance + executor_balance
#+END_SRC
